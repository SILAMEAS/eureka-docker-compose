server:
  port: ${PORT:${GATEWAY_PORT}}

spring:
  application:
    name: ${GATEWAY_NAME}
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - openid
              - profile
              - email
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            user-name-attribute: sub

  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: auth
              uri: lb://auth-service
              predicates:
                - Path=/auth/**
              filters:
                - StripPrefix=1
                - PreserveHostHeader
            - id: ${PRODUCT_ID}
              uri: ${PRODUCT_URI}
              predicates:
                - Path=${PRODUCT_PATH}
              filters:
                - StripPrefix=0
          default-filters:
            - TokenRelay

eureka:
  client:
    service-url:
      defaultZone: ${DISCOVER_URL}
    register-with-eureka: true
    fetch-registry: true
  instance:
    hostname: ${GATEWAY_HOST}
    prefer-ip-address: false
    non-secure-port: ${GATEWAY_PORT}
    instance-id: ${GATEWAY_HOST}:${GATEWAY_PORT}
    metadata-map:
      instanceId: ${spring.application.name}:${server.port}

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    gateway:
    # Remove 'enabled: true' or update to use 'access' config as per your Spring Boot version
    # enabled: true
